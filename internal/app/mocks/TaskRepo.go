// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "todo-list/internal/model"

// TaskRepo is an autogenerated mock type for the TaskRepo type
type TaskRepo struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: ctx, t
func (_m *TaskRepo) AddTask(ctx context.Context, t model.TodoTask) (model.TodoTask, error) {
	ret := _m.Called(ctx, t)

	var r0 model.TodoTask
	if rf, ok := ret.Get(0).(func(context.Context, model.TodoTask) model.TodoTask); ok {
		r0 = rf(ctx, t)
	} else {
		r0 = ret.Get(0).(model.TodoTask)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.TodoTask) error); ok {
		r1 = rf(ctx, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: ctx, id
func (_m *TaskRepo) DeleteTask(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskById provides a mock function with given fields: ctx, id
func (_m *TaskRepo) GetTaskById(ctx context.Context, id int) (model.TodoTask, error) {
	ret := _m.Called(ctx, id)

	var r0 model.TodoTask
	if rf, ok := ret.Get(0).(func(context.Context, int) model.TodoTask); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.TodoTask)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByText provides a mock function with given fields: ctx, text
func (_m *TaskRepo) GetTaskByText(ctx context.Context, text string) ([]model.TodoTask, error) {
	ret := _m.Called(ctx, text)

	var r0 []model.TodoTask
	if rf, ok := ret.Get(0).(func(context.Context, string) []model.TodoTask); ok {
		r0 = rf(ctx, text)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TodoTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksByDateAndStatus provides a mock function with given fields: ctx, date, status
func (_m *TaskRepo) GetTasksByDateAndStatus(ctx context.Context, date model.Date, status bool) ([]model.TodoTask, error) {
	ret := _m.Called(ctx, date, status)

	var r0 []model.TodoTask
	if rf, ok := ret.Get(0).(func(context.Context, model.Date, bool) []model.TodoTask); ok {
		r0 = rf(ctx, date, status)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TodoTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, model.Date, bool) error); ok {
		r1 = rf(ctx, date, status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksByStatus provides a mock function with given fields: ctx, status, offset, limit
func (_m *TaskRepo) GetTasksByStatus(ctx context.Context, status bool, offset int, limit int) ([]model.TodoTask, error) {
	ret := _m.Called(ctx, status, offset, limit)

	var r0 []model.TodoTask
	if rf, ok := ret.Get(0).(func(context.Context, bool, int, int) []model.TodoTask); ok {
		r0 = rf(ctx, status, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.TodoTask)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, bool, int, int) error); ok {
		r1 = rf(ctx, status, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: ctx, id, t
func (_m *TaskRepo) UpdateTask(ctx context.Context, id int, t model.TodoTask) (model.TodoTask, error) {
	ret := _m.Called(ctx, id, t)

	var r0 model.TodoTask
	if rf, ok := ret.Get(0).(func(context.Context, int, model.TodoTask) model.TodoTask); ok {
		r0 = rf(ctx, id, t)
	} else {
		r0 = ret.Get(0).(model.TodoTask)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int, model.TodoTask) error); ok {
		r1 = rf(ctx, id, t)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
